= A* path finding algorithm =

== The Algorithm ==
    
{{{

    /******
    function A*(start,goal)
       closedset := the empty set
       
       // The set of nodes already evaluated.
       openset := {start}
       
       // The set of tentative nodes to be evaluated, initially containing the start node
       came_from := the empty map
       
       // The map of navigated nodes.
       g_score[start] := 0
       
       // Cost from start along best known path.
       // Estimated total cost from start to goal through y.
       f_score[start] := g_score[start] + heuristic_cost_estimate(start, goal)
       
       while openset is not empty
          current := the node in openset having the lowest f_score[] value
          if current = goal
             return reconstruct_path(came_from, goal)
             
          remove current from openset
          add current to closedset
          
          for each neighbor in neighbor_nodes(current)
             if neighbor in closedset
                continue
                
             tentative_g_score := g_score[current] + dist_between(current,neighbor)
             
             if neighbor not in openset or tentative_g_score < g_score[neighbor]
                came_from[neighbor] := current
                g_score[neighbor] := tentative_g_score
                f_score[neighbor] := g_score[neighbor] + heuristic_cost_estimate(neighbor, goal)
                
                if neighbor not in openset
                   add neighbor to openset
                   
       return failure
    
    /******
    function reconstruct_path(came_from,current)
    
       total_path := [current]
       
       while current in came_from:
          current := came_from[current]
          total_path.append(current)
          
       return total_path`
}}}

== Class runthrough ==

(see graph in notes)

| Step | Path | Est. Cost | Explored | Fronteer      |
|------|------|-----------|----------|---------------|
| 1    | A    | 4         | []       | [A4]          |
| 2    | AC   | 4         | [A]      | [C4 B6 D10]   |
| 3    | ACE  | 5         | [AC]     | [E5 B6 F6 D7] |
| 4    | i?   | 5         | [ACE]    | [F5 B6 D7]    |
| 5    |      |           | [ACEF]   | [G5 B6 D7]    |

{{{
// G = 1 + 2 + 1 + 1 => 5 (path cost along ACEFG)
}}}

SOLUTION: `ACEFG`

[[admissable]] [[huristic]] => always optimistic


Theroem says "it is [[optimal]]".
Theorem is true if it is [[admissable]].

[[time complexity|Time complexity]] is [[exponential]]

if you can get an error down it will make it 

Space complexity is a problem because it keeps all nodes in memory

WAY TOO MUCH MEMORY is it's main weakness, thus there's many other
algorithms that try to cut down on memory (but are less efective)

= 3.2 solution TEST!!!! =

| step | Path to State expanded | # of nodes | Total estimated cost | Explored state list | Frontier (priority queue) |
|------|------------------------|------------|----------------------|---------------------|---------------------------|
| 1    | A                      | 0          | 5                    |                     | [A5]                      |
| 2    | AC                     | 1          | 4                    | (A)                 | [C4 B5]                   |
| 3    | AB                     | 1          | 5                    | (A C)               | [B5 H6 G8]                |
| 4    | ACH                    | 2          | 6                    | (A B C)             | [H6 G8]                   |
| 5    | ACHG                   | 3          | 6                    | (A B C H)           | [G6]                      |

THIS Doesn't find the optimum path


F-value Gscore + F

{closed, open} = {explored, fronteer}
